{"version":3,"sources":["../../../src/components/Card/card.tsx","../../../src/components/ui/card.tsx","../../../src/lib/utils.ts"],"sourcesContent":["'use client';\nimport { CardProps } from '../../types/card';\nimport { CardProvider, Card as UICard } from '../ui/card';\n\nexport const Card = (props: CardProps) => {\n  return (\n    <CardProvider>\n      <UICard {...props} />\n    </CardProvider>\n  );\n};\n\nexport default Card;\n","import * as React from 'react';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\nimport { Button, ButtonProps } from '../Button';\n\ntype CardContext = {\n  isHovered: boolean;\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\n  children?: React.ReactNode;\n};\n\nconst CardContext = React.createContext<CardContext | undefined>(undefined);\n\nfunction useCardContext() {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('Card components must be used within a Card component');\n  }\n  return context;\n}\n\nfunction CardProvider({ children }: { readonly children: React.ReactNode }) {\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  const value = React.useMemo(() => ({ isHovered, setIsHovered }), [isHovered]);\n  return <CardContext.Provider value={value}>{children}</CardContext.Provider>;\n}\n\nconst cardVariants = cva(\n  'text-gray-30 flex flex-col gap-6 rounded-xl p-6 shadow-sm w-full border-[0.5px] border-gray-0/20 bg-blur transition-colors duration-200 ease-in-out',\n  {\n    variants: {\n      variant: {\n        default: 'card',\n        clickable:\n          'card cursor-pointer hover:bg-linear-[180deg] hover:from-gray-0/8 hover:to-gray-0/2 hover:bg-transparent hover:border-gray-0/30',\n        console:\n          'bg-transparent bg-linear-180 from-gray-0/8 to-gray-0/2 bg-blur border-[0.5px] border-gray-0/20 cursor-pointer hover:from-gray-0/16 hover:to-gray-0/4 hover:bg-transparent hover:border-gray-0/40',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nfunction Card({\n  className,\n  variant = 'default',\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> &\n  VariantProps<typeof cardVariants> & {\n    asChild?: boolean;\n  }) {\n  const { setIsHovered } = useCardContext();\n  const Comp = asChild ? Slot : 'div';\n\n  const handleMouseEnter = () => {\n    if (variant === 'console') {\n      setIsHovered(true);\n    }\n  };\n  const handleMouseLeave = () => {\n    if (variant === 'console') {\n      setIsHovered(false);\n    }\n  };\n\n  return (\n    <Comp\n      data-slot=\"card\"\n      className={cn(cardVariants({ variant }), className)}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-title\" className={cn('leading-none font-semibold', className)} {...props} />;\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-description\" className={cn(' text-sm', className)} {...props} />;\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn('col-start-2 row-span-2 row-start-1 self-start justify-self-end', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-content\" className={cn('min-h-24', className)} {...props} />;\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"card-footer\" className={cn('flex items-center [.border-t]:pt-6', className)} {...props} />;\n}\n\nfunction ConsoleButton({ className, ...props }: ButtonProps) {\n  const { isHovered } = useCardContext();\n  return (\n    <Button\n      className={cn(\n        'bg-transparent border border-gray-60 text-gray-10 hover:bg-gray-0 hover:border-gray-0 hover:text-gray-100',\n        isHovered ? 'bg-gray-0 border-gray-0 text-gray-100' : '',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardAction,\n  CardContent,\n  CardContext,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardProvider,\n  CardTitle,\n  ConsoleButton,\n  useCardContext,\n};\n","import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,cAAAA;AAAA,EAAA;AAAA;AAAA;;;ACAA,YAAuB;AAEvB,wBAAqB;AACrB,sCAAuC;;;ACHvC,kBAAsC;AACtC,4BAAwB;AAEjB,SAAS,MAAM,QAAsB;AAC1C,aAAO,mCAAQ,kBAAK,MAAM,CAAC;AAC7B;;;ADsBS;AAdT,IAAM,cAAoB,oBAAuC,MAAS;AAE1E,SAAS,iBAAiB;AACxB,QAAM,UAAgB,iBAAW,WAAW;AAC5C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,sDAAsD;AAAA,EACxE;AACA,SAAO;AACT;AAEA,SAAS,aAAa,EAAE,SAAS,GAA2C;AAC1E,QAAM,CAAC,WAAW,YAAY,IAAU,eAAS,KAAK;AAEtD,QAAM,QAAc,cAAQ,OAAO,EAAE,WAAW,aAAa,IAAI,CAAC,SAAS,CAAC;AAC5E,SAAO,4CAAC,YAAY,UAAZ,EAAqB,OAAe,UAAS;AACvD;AAEA,IAAM,mBAAe;AAAA,EACnB;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR,SAAS;AAAA,QACP,SAAS;AAAA,QACT,WACE;AAAA,QACF,SACE;AAAA,MACJ;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEA,SAAS,KAAK,IAQT;AARS,eACZ;AAAA;AAAA,IACA,UAAU;AAAA,IACV,UAAU;AAAA,EAnDZ,IAgDc,IAIT,kBAJS,IAIT;AAAA,IAHH;AAAA,IACA;AAAA,IACA;AAAA;AAMA,QAAM,EAAE,aAAa,IAAI,eAAe;AACxC,QAAM,OAAO,UAAU,yBAAO;AAE9B,QAAM,mBAAmB,MAAM;AAC7B,QAAI,YAAY,WAAW;AACzB,mBAAa,IAAI;AAAA,IACnB;AAAA,EACF;AACA,QAAM,mBAAmB,MAAM;AAC7B,QAAI,YAAY,WAAW;AACzB,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACC,aAAU;AAAA,MACV,WAAW,GAAG,aAAa,EAAE,QAAQ,CAAC,GAAG,SAAS;AAAA,MAClD,cAAc;AAAA,MACd,cAAc;AAAA,OACV;AAAA,EACN;AAEJ;;;ADzEM,IAAAC,sBAAA;AAHC,IAAMC,QAAO,CAAC,UAAqB;AACxC,SACE,6CAAC,gBACC,uDAAC,yBAAW,MAAO,GACrB;AAEJ;AAEA,IAAO,eAAQA;","names":["Card","import_jsx_runtime","Card"]}